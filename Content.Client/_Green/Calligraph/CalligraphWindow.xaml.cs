using System.Linq;
using Content.Client.Administration.UI.CustomControls;
using Content.Client.UserInterface.Controls;
using Content.Shared._Green.Calligraph;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Green.Calligraph;

[GenerateTypedNameReferences]
public sealed partial class CalligraphWindow : FancyWindow
{
    public CalligraphWindow()
    {
        RobustXamlLoader.Load(this);

        RecordList.GenerateItem += GenerateRecord;
    }

    public void Populate(CalligraphBoundUserInterfaceState state)
    {
        state.Records.Sort(Compare);

        RecordList.PopulateList([.. state.Records.Select(record => new RecordListData(record, $"{record.Name} {record.Handwriting} {record.Author}"))]);
    }

    private static int Compare(SignRecord record1, SignRecord record2)
    {
        if (record1.Author is not null && record2.Author is not null)
            return record1.Author.CompareTo(record2.Author);

        if (record1.Author is not null)
            return 1;

        if (record2.Author is not null)
            return -1;

        return 0;
    }

    private void GenerateRecord(ListData data, ListContainerButton button)
    {
        if (data is not RecordListData recordData)
            return;

        button.AddChild(new BoxContainer
        {
            SeparationOverride = 2,

            Children =
            {
                new Label
                {
                    Text = recordData.Record.Name,
                    SizeFlagsStretchRatio = 1,
                    HorizontalExpand = true,
                    ClipText = true
                },
                new VSeparator(),
                new Label
                {
                    Text = recordData.Record.Handwriting ?? Loc.GetString("generic-invalid"),
                    SizeFlagsStretchRatio = 1,
                    HorizontalExpand = true,
                    ClipText = true
                },
                new VSeparator(),
                new Label
                {
                    Text = recordData.Record.Author ?? Loc.GetString("generic-invalid"),
                    SizeFlagsStretchRatio = 1,
                    HorizontalExpand = true,
                    ClipText = true
                }
            }
        });

        button.StyleClasses.Clear();
    }

    private record RecordListData(SignRecord Record, string FilteringString) : ListData;
}
